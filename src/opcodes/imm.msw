; addi, slti, sltiu, xori, ori, andi

[rv.exec.opcode=4 [
	(set imm (rv.slice_bin32 .insn 31 20))
	(set xs1 (int (rv.slice_bin32 .insn 19 15) 2))
	(set funct3 (int (rv.slice_bin32 .insn 14 12) 2))
	(set xd (int (rv.slice_bin32 .insn 11 7) 2))

	([rv.exec.opcode=4.funct3= .funct3])
	
	(rv.next)
]]
[rv.exec.opcode=4.log [
	(rv.log [
		$1 " x" .xd ", x" .xs1 ", " (hex (rv.unbin_s .imm 11))
	])
]]
	; addi: +
	[rv.exec.opcode=4.funct3=0 [
		(#if debug (rv.exec.opcode=4.log "addi "))
		(rv.set_x .xd (+
			(rv.get_x .xs1)
			(rv.unbin_s .imm 11)
		))
	]]
	; slli: <<
	[rv.exec.opcode=4.funct3=1 [
		(#if debug (rv.exec.opcode=4.log "slli "))
		; funct7 is always 0 in slli, just use imm directly
		(rv.set_x .xd
			(int [
				(slice (rv.bin32 (rv.get_x .xs1)) (int .imm 2))
				(repeat (int (slice .imm 7) 2) 0)
			]	2)
		)
	]]
	; slti: <
	[rv.exec.opcode=4.funct3=2 [
		(#if debug (rv.exec.opcode=4.log "slti "))
		(rv.set_x .xd
			(if (less
				(rv.unbin_s (rv.bin32 (rv.get_x .xs1)) 11)
				(rv.unbin_s .imm)
			) 1 0)
		)
	]]
	; sltiu: <u
	[rv.exec.opcode=4.funct3=3 [
		(#if debug (rv.exec.opcode=4.log "sltiu"))
		(rv.set_x .xd
			(if (< (rv.get_x .xs1) (int .imm 2)) 1 0)
		)
	]]
	; xori: ^
	[rv.exec.opcode=4.funct3=4 [
		(#if debug (rv.exec.opcode=4.log "xori "))
		(rv.set_x .xd
			(int (rv.xor
				(rv.bin32 (rv.get_x .xs1))
				[00000000000000000000 .imm]
			) 2)
		)
	]]
	; srli: >>, srai: >>>
	[rv.exec.opcode=4.funct3=5 [
		(set arith (== (slice .imm 1 2) 1))
		(set shamt (int (slice .imm 7) 2))
		(#if debug
			(rv.exec.opcode=4.log
				(if .arith "srai " "srli ")
			)
		)
		(set xs1_bin (rv.bin32 (rv.get_x .xs1)))
		(rv.set_x .xd
			(int [
				(repeat .shamt
					(if .arith (slice .xs1_bin 0 1) 0)
				)
				(slice .xs1_bin 0 [- .shamt])
			]	2)
		)
	]]
	; ori: |
	[rv.exec.opcode=4.funct3=6 [
		(#if debug (rv.exec.opcode=4.log "ori  "))
		(rv.set_x .xd
			(int (rv.or
				(rv.bin32 (rv.get_x .xs1))
				[00000000000000000000 .imm]
			) 2)
		)
	]]
	; andi: &
	[rv.exec.opcode=4.funct3=7 [
		(#if debug (rv.exec.opcode=4.log "andi "))
		(rv.set_x .xd
			(int (rv.and
				(rv.bin32 (rv.get_x .xs1))
				[00000000000000000000 .imm]
			) 2)
		)
	]]